/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bai_tap_02;

import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Minh Nhi
 */
public class Main extends javax.swing.JFrame {

    private static MyArray<Record> list1;
    private static MyArray<Record> list2;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        panel2 = new java.awt.Panel();
        panel9 = new java.awt.Panel();
        rEV = new javax.swing.JRadioButton();
        rVE = new javax.swing.JRadioButton();
        panel10 = new java.awt.Panel();
        btnHistory = new javax.swing.JButton();
        panel3 = new java.awt.Panel();
        txtKey = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        panel4 = new java.awt.Panel();
        panel5 = new java.awt.Panel();
        jLabel2 = new javax.swing.JLabel();
        panel6 = new java.awt.Panel();
        txtWord = new javax.swing.JTextField();
        panel7 = new java.awt.Panel();
        jLabel3 = new javax.swing.JLabel();
        panel8 = new java.awt.Panel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMeaning = new javax.swing.JTextArea();

        panel1.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dictionary");
        panel1.add(jLabel1);

        panel2.setLayout(new java.awt.GridLayout(1, 2));

        panel9.setLayout(new java.awt.GridLayout(2, 1));

        rEV.setSelected(true);
        rEV.setText("English -> Vietnamese");
        panel9.add(rEV);

        rVE.setText("Vietnamese -> English");
        panel9.add(rVE);

        panel2.add(panel9);

        panel10.setLayout(new java.awt.GridLayout(1, 0));

        btnHistory.setText("History");
        btnHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHistoryMouseClicked(evt);
            }
        });
        panel10.add(btnHistory);

        panel2.add(panel10);

        panel3.setLayout(new java.awt.GridLayout(2, 1));

        txtKey.setToolTipText("");
        txtKey.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        panel3.add(txtKey);

        btnSearch.setText("Search");
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });
        panel3.add(btnSearch);

        panel5.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Word");
        panel5.add(jLabel2);

        panel6.setLayout(new java.awt.GridLayout(1, 0));
        panel6.add(txtWord);

        panel7.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Meaning");
        panel7.add(jLabel3);

        panel8.setLayout(new java.awt.GridLayout(1, 0));

        txtMeaning.setEditable(false);
        txtMeaning.setColumns(20);
        txtMeaning.setRows(5);
        jScrollPane2.setViewportView(txtMeaning);

        panel8.add(jScrollPane2);

        javax.swing.GroupLayout panel4Layout = new javax.swing.GroupLayout(panel4);
        panel4.setLayout(panel4Layout);
        panel4Layout.setHorizontalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel4Layout.setVerticalGroup(
            panel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel4Layout.createSequentialGroup()
                .addComponent(panel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel8, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addComponent(panel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        // TODO add your handling code here:
        String str = txtKey.getText();
        if (rEV.isSelected() == true) {
            int count = 0;
            for (int i = 0; i < list1.size(); i++) {
                if (list1.get(i).getWord().equals(str)) {
                    txtWord.setText(list1.get(i).getWord());
                    txtMeaning.setText(list1.get(i).getMeaning());
                    count++;
                    break;
                }
            }
            if (count == 0) {
                txtWord.setText("Khong tim thay tu khoa!");
            } else {
                //xu ly history
                //doc file history -> luu lai ds
                MyArray<Record> history = new MyArray<Record>(); //lay lai record class: word = word, meaning = count
                try {
                    File xmlFile = new File("history.xml");
                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                    Document doc = dBuilder.parse(xmlFile);
                    doc.getDocumentElement().normalize();

                    NodeList nList = doc.getElementsByTagName("record");

                    for (int temp = 0; temp < nList.getLength(); temp++) {
                        Node nNode = nList.item(temp);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;

                            String word = eElement.getElementsByTagName("word").item(0).getTextContent();
                            String meaning = eElement.getElementsByTagName("count").item(0).getTextContent();

                            Record r = new Record(word, meaning);

                            history.add(r);
                        }
                    }
                } catch (Exception ex) {
                }
                //tim key trung: neu trung thi +count ? them node -> dua vao mang
                int countw = 0;
                for (int i = 0; i < history.size(); i++) {
                    if (txtWord.getText().equals(history.get(i).getWord())) {
                        history.get(i).setMeaning(String.valueOf(Integer.parseInt(history.get(i).getMeaning()) + 1));
                        countw++;
                        break;
                    }
                }
                if (countw == 0) {
                    Record newr = new Record(txtKey.getText(), "1");
                    history.add(newr);
                }
                //ghi lại file
                try {
                    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                    // root elements
                    Document doc = docBuilder.newDocument();
                    Element rootElement = doc.createElement("history");
                    doc.appendChild(rootElement);
                    
                    for (int i = 0; i < history.size(); i++) {
                    // record elements
                    Element record = doc.createElement("record");
                    rootElement.appendChild(record);
                        
                        Element w = doc.createElement("word");
                        w.appendChild(doc.createTextNode(history.get(i).getWord()));
                        record.appendChild(w);

                        Element c = doc.createElement("count");
                        c.appendChild(doc.createTextNode(history.get(i).getMeaning()));
                        record.appendChild(c);
                    }

                    TransformerFactory transformerFactory = TransformerFactory.newInstance();
                    Transformer transformer = transformerFactory.newTransformer();
                    DOMSource source = new DOMSource(doc);
                    StreamResult result = new StreamResult(new File("history.xml"));

                    // Output to console for testing
                    // StreamResult result = new StreamResult(System.out);
                    transformer.transform(source, result);

                } catch (Exception ex) {

                }
            }
        }

        if (rVE.isSelected() == true) {
            int count = 0;
            for (int i = 0; i < list2.size(); i++) {
                if (list2.get(i).getWord().equals(str)) {
                    txtWord.setText(list2.get(i).getWord());
                    txtMeaning.setText(list2.get(i).getMeaning());
                    count++;
                    break;
                }
            }
            if (count == 0) {
                txtWord.setText("Khong tim thay tu khoa!");
            }
            else{
                //xu ly history
                //doc file history -> luu lai ds
                MyArray<Record> history = new MyArray<Record>(); //lay lai record class: word = word, meaning = count
                try {
                    File xmlFile = new File("history.xml");
                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                    Document doc = dBuilder.parse(xmlFile);
                    doc.getDocumentElement().normalize();

                    NodeList nList = doc.getElementsByTagName("record");

                    for (int temp = 0; temp < nList.getLength(); temp++) {
                        Node nNode = nList.item(temp);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;

                            String word = eElement.getElementsByTagName("word").item(0).getTextContent();
                            String meaning = eElement.getElementsByTagName("count").item(0).getTextContent();

                            Record r = new Record(word, meaning);

                            history.add(r);
                        }
                    }
                } catch (Exception ex) {
                }
                //tim key trung: neu trung thi +count ? them node -> dua vao mang
                int countw = 0;
                for (int i = 0; i < history.size(); i++) {
                    if (txtWord.getText().equals(history.get(i).getWord())) {
                        history.get(i).setMeaning(String.valueOf(Integer.parseInt(history.get(i).getMeaning()) + 1));
                        countw++;
                        break;
                    }
                }
                if (countw == 0) {
                    Record newr = new Record(txtKey.getText(), "1");
                    history.add(newr);
                }
                //ghi lại file
                try {
                    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                    // root elements
                    Document doc = docBuilder.newDocument();
                    Element rootElement = doc.createElement("history");
                    doc.appendChild(rootElement);
                    
                    for (int i = 0; i < history.size(); i++) {
                    // record elements
                    Element record = doc.createElement("record");
                    rootElement.appendChild(record);
                        
                        Element w = doc.createElement("word");
                        w.appendChild(doc.createTextNode(history.get(i).getWord()));
                        record.appendChild(w);

                        Element c = doc.createElement("count");
                        c.appendChild(doc.createTextNode(history.get(i).getMeaning()));
                        record.appendChild(c);
                    }

                    TransformerFactory transformerFactory = TransformerFactory.newInstance();
                    Transformer transformer = transformerFactory.newTransformer();
                    DOMSource source = new DOMSource(doc);
                    StreamResult result = new StreamResult(new File("history.xml"));

                    // Output to console for testing
                    // StreamResult result = new StreamResult(System.out);
                    transformer.transform(source, result);

                } catch (Exception ex) {
                }
            }
        }

    }//GEN-LAST:event_btnSearchMouseClicked

    private void btnHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHistoryMouseClicked
        // TODO add your handling code here:
        History h = new History();
        h.setVisible(true);
    }//GEN-LAST:event_btnHistoryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
                // doc du lieu Anh->Viet vao list 1
                list1 = new MyArray<Record>();
                try {
                    File xmlFile = new File("Anh_Viet.xml");
                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                    Document doc = dBuilder.parse(xmlFile);
                    doc.getDocumentElement().normalize();

                    NodeList nList = doc.getElementsByTagName("record");

                    for (int temp = 0; temp < nList.getLength(); temp++) {
                        Node nNode = nList.item(temp);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;

                            String word = eElement.getElementsByTagName("word").item(0).getTextContent();
                            String meaning = eElement.getElementsByTagName("meaning").item(0).getTextContent();

                            Record r = new Record(word, meaning);

                            list1.add(r);
                        }
                    }
                } catch (Exception ex) {

                }
                // doc du lieu Viet -> Anh vao list 2
                list2 = new MyArray<Record>();
                try {
                    File xmlFile = new File("Viet_Anh.xml");
                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                    Document doc = dBuilder.parse(xmlFile);
                    doc.getDocumentElement().normalize();

                    NodeList nList = doc.getElementsByTagName("record");

                    for (int temp = 0; temp < nList.getLength(); temp++) {
                        Node nNode = nList.item(temp);
                        if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element eElement = (Element) nNode;

                            String word = eElement.getElementsByTagName("word").item(0).getTextContent();
                            String meaning = eElement.getElementsByTagName("meaning").item(0).getTextContent();

                            Record r = new Record(word, meaning);

                            list2.add(r);
                        }
                    }
                } catch (Exception ex) {

                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHistory;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Panel panel1;
    private java.awt.Panel panel10;
    private java.awt.Panel panel2;
    private java.awt.Panel panel3;
    private java.awt.Panel panel4;
    private java.awt.Panel panel5;
    private java.awt.Panel panel6;
    private java.awt.Panel panel7;
    private java.awt.Panel panel8;
    private java.awt.Panel panel9;
    private javax.swing.JRadioButton rEV;
    private javax.swing.JRadioButton rVE;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextArea txtMeaning;
    private javax.swing.JTextField txtWord;
    // End of variables declaration//GEN-END:variables
}
